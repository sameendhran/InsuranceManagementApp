Coverage Entity - Negative Scenarios Handled

1. Blank or null coverage name
- Handled in validateCoverage() using isBlank()

2. Leading/trailing spaces in name
- Trimmed using trim() in validateCoverage()

3. Duplicate name on create
- Checked using repo.findByCoverageNameIgnoreCase() in addCoverage()

4. Duplicate name on update
- Checked in updateCoverage() by comparing IDs

5. Case-insensitive name comparison
- findByCoverageNameIgnoreCase() used

6. Special characters in name
- Allowed chars: a-z, A-Z, 0-9, space
- Regex used in validateCoverage()

7. Name length over 100 characters
- Checked in validateCoverage()

8. Invalid ID in get/update (0 or negative)
- Checked in service layer

9. Fetching non-existing ID
- Throws CoverageException via orElseThrow()

10. Fetching non-existing name
- CoverageException thrown if name not found

11. Get all when DB is empty
- Throws CoverageException in getAllCoverages()

12. SQL injection or unsafe input
- Prevented via regex and no raw queries

Optional:
- Add @Valid in controller
- Add createdAt/updatedAt
- Use @ControllerAdvice for global errors
- Add rate limiting
